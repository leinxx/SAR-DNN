net: "$net"
base_lr: 0.03
lr_policy: "step"
gamma: 0.1
stepsize: 5000
display: 100
max_iter: 50000
momentum: 0.9
weight_decay: 0.0005
snapshot: 1000
snapshot_prefix: "$snapshot"
solver_mode: GPU
random_seed: 1700
average_loss: 100
test_interval: 1000
test_iter: 50
#debug_info: true

##splitmark##
name: "CaffeNet"
layer {
  name: "data"
  type: "DatumData"
  top: "data"
  top: "label"
  datum_data_param {
    source: "$train_source"
    #target_source: "$train_target_source"
    mean_file: "$train_mean"
    shuffle: true
    batch_size: 128
    label_scale: 0.1
    #binary_label: 0
  }
  transform_param {
    crop_size: $crop_size
    label_crop_size: $label_crop_size
    mirror: true
    rotate: true
    gitter_mean_range: 0.5 # the range of the gaussian mean
    gitter_std: 1.0 # the std of the gaussian
    mean_value_file: "$train_mean" 
  }
  include: { phase: TRAIN }
}
layer {
  name: "data"
  type: "DatumData"
  top: "data"
  top: "label"
  datum_data_param {
    source: "$test_source"
    #target_source: "$test_target_source"
    mean_file: "$train_mean"
    shuffle: true
    batch_size: 128
    label_scale: 0.1
  }
  transform_param {
    crop_size: $crop_size
    label_crop_size: $label_crop_size
    mirror: false
    rotate: false
    mean_value_file: "$train_mean" 
  }
  include: { phase: TEST }
}

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1 
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 3
    stride: 1
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.0589 
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "conv1"
  top: "conv1_1"
  param {
    lr_mult: 1 
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 3
    stride: 1
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.0589
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "crop_4x"
  type: "Pooling"
  bottom: "data"
  top: "data_2x"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name:   
  
}

layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1 
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.0416
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "conv2"
  top: "conv2_1"
  param {
    lr_mult: 1 
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    kernel_size: 3
    weight_filler {
      #type: "uniform"
      #min: -0.05
      #max: 0.05
      type: "gaussian"
      std: 0.0416
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
#layer {
#  name: "conv2_2"
#  type: "Convolution"
#  bottom: "conv2_1"
#  top: "conv2_2"
#  param {
#    lr_mult: 1 
#    decay_mult: 1
#  }
#  param {
#    lr_mult: 2
#    decay_mult: 0
#  }
#  convolution_param {
#    num_output: 128
#    kernel_size: 3
#    weight_filler {
#      type: "uniform"
#      min: -0.05
#      max: 0.05
#    }
#    bias_filler {
#      type: "constant"
#      value: 0
#    }
#  }
#}
#layer {
#  name: "relu2_2"
#  type: "ReLU"
#  bottom: "conv2_2"
#  top: "conv2_2"
#}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_1"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "fc4"
  type: "InnerProduct"
  bottom: "pool2"
  top: "fc4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "gaussian"
      std: 0.029
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "fc4"
  top: "fc4"
}
layer {
  name: "drop4"
  type: "Dropout"
  bottom: "fc4"
  top: "fc4"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc5"
  type: "InnerProduct"
  bottom: "fc4"
  top: "fc5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1
    weight_filler {
      type: "gaussian"
      std: 0.044
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "loss"
  type: "EuclideanLoss"
  #type: "SoftmaxWithLoss"
  bottom: "fc5"
  bottom: "label"
  top: "loss"
  loss_weight: 1
  #loss_param  {
  #  ignore_label: 10
  #}
}
